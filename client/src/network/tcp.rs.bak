//use std::{net::SocketAddr, sync::Arc};
//
//use anyhow::anyhow;
//use anyhow::Result;
//use once_cell::sync::Lazy;
//use tokio::{net::TcpStream, sync::Mutex};
//
//pub static SERVER_STREAM: Lazy<Arc<Mutex<Option<TcpStream>>>> =
//    Lazy::new(|| Arc::new(Mutex::new(None)));
//
//pub async fn server_connection(socket: SocketAddr) -> Result<()> {
//    let stream = TcpStream::connect(socket).await?;
//    {
//        let mut server_stream = SERVER_STREAM.lock().await;
//        *server_stream = Some(stream);
//    }
//    info!("Connected to SERVER at {}", socket.ip());
//
//    tokio::spawn(async {
//        let mut buffer = [0u8; 1024];
//        loop {
//            let server_stream = SERVER_STREAM.lock().await;
//
//            if let Some(ref stream) = *server_stream {
//                let bytes_read = match stream.try_read(&mut buffer) {
//                    Ok(n) if n == 0 => {
//                        error!("Connection closed by server");
//                        break;
//                    }
//                    Ok(n) => n,
//                    Err(e) => {
//                        error!("Failed to read from stream: {}", e);
//                        break;
//                    }
//                };
//
//                receive_data(&buffer[..bytes_read]).await.unwrap();
//            }
//        }
//    });
//
//    Ok(())
//}
//
//pub async fn receive_data(data: &[u8]) -> Result<&[u8]> {
//    if data.len() < 4 {
//        return Err(anyhow!("Received message data too short"));
//    }
//
//    let length: [u8; 4] = data[..4].try_into().expect("slice with incorrect length");
//    let msg_length = u32::from_be_bytes(length) as usize;
//    if data.len() - 4 != msg_length {
//        return Err(anyhow!("message length does not = remaining bytes"));
//    }
//    let message = &data[4..];
//    Ok(message)
//}
